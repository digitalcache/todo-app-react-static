{"version":3,"sources":["images/add-blue.svg","images/checked.svg","images/not-checked.svg","actions/index.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","serviceWorker.js","index.js"],"names":["module","exports","nextTodoId","VisibilityFilters","connect","props","input","useState","flag","setFlag","className","onSubmit","e","text","preventDefault","value","trim","length","dispatch","type","id","placeholder","ref","el","src","AddBlue","alt","onClick","Todo","completed","CheckedIcon","UnCheckedIcon","TodoList","todos","toggleTodo","active","sortTodo","filter","map","todo","index","key","getVisibleTodos","task","Error","state","visibilityFilter","App","VisibleTodoList","action","sortedArray","sort","a","b","x","toLowerCase","y","combineReducers","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e16b065d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add-blue.08126b26.svg\";","module.exports = __webpack_public_path__ + \"static/media/checked.0e227ab5.svg\";","module.exports = __webpack_public_path__ + \"static/media/not-checked.558bca77.svg\";","let nextTodoId = 0;\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\n\r\nexport const addTodo = text => ({\r\n  type: 'ADD_TODO',\r\n  id: nextTodoId++,\r\n  text\r\n});\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n});\r\nexport const sortTodo = () => ({\r\n  type: 'SORT_TODO',\r\n});","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo, sortTodo } from './../actions/index'\r\nimport AddBlue from './../images/add-blue.svg'\r\nimport './AddTodo.scss'\r\n\r\nconst AddTodo = (props) => {\r\n    let input;\r\n    const [flag, setFlag] = useState(false);\r\n    return (\r\n        <div className=\"inputTodo\">\r\n            <form onSubmit={\r\n                e => {\r\n                    e.preventDefault();\r\n                    if(!input.value.trim()){\r\n                        return\r\n                    }\r\n                    if(input.value.trim().length > 20){\r\n                        setFlag(true);\r\n                        return\r\n                    }\r\n                    setFlag(false);\r\n                    props.dispatch(addTodo(input.value));\r\n                    input.value = '';\r\n                }\r\n            }>\r\n                <input placeholder=\"Add a task\" type=\"text\" ref={el => (input = el)}></input>\r\n                <img className=\"blueIcon\" src={AddBlue} alt=\"blue icon\"></img>\r\n                <button onClick={()=> props.dispatch(sortTodo())} type=\"button\">Sort</button>\r\n                <button type=\"submit\">Add</button>\r\n            </form>\r\n            {flag ? <p className=\"errorInput\">Must be 20 characters or less</p>:<></>}\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default connect()(AddTodo);\r\n","import React from 'react';\r\nimport CheckedIcon from './../images/checked.svg';\r\nimport UnCheckedIcon from './../images/not-checked.svg';\r\n\r\nimport './Todo.scss';\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n  <li\r\n    className=\"listItem\"\r\n    onClick={onClick}\r\n    // style={{\r\n    //   textDecoration: completed ? 'line-through' : 'none'\r\n    // }}\r\n  >\r\n    {completed ? <img src={CheckedIcon} alt=\"blue Checked\"></img> : <img src={UnCheckedIcon} alt=\"unchecked icon\"></img>}\r\n    <span className={completed ? \"underline\" : \"\"}>{text}</span>\r\n  </li>\r\n);\r\n\r\nexport default Todo;","import React, { useEffect } from 'react';\r\nimport Todo from './Todo';\r\nimport './TodoList.scss'\r\n\r\nconst TodoList = ({ todos, toggleTodo, sortTodo }) => {\r\n  const active = todos.filter((value) => value.completed === false);\r\n  const completed = todos.filter((value) => value.completed === true);\r\n  return (\r\n    <>\r\n      <div className=\"gridDisplay\">\r\n        {active.length > 0 && <div className=\"toDoList\">\r\n          <h2>To-do</h2>\r\n          <ul>\r\n            {active.map((todo,index) => {\r\n              if(index<=10) {\r\n                return(<Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />)\r\n              }})\r\n              }\r\n          </ul>\r\n          {active.length > 10 && <div className=\"loadMore\">Load More...</div>}\r\n        </div>}\r\n        {completed.length > 0 && <div className=\"completedList\">\r\n          <h2>Completed</h2>\r\n          <ul>\r\n            {completed.map((todo, index) => {\r\n              if (index <= 10) {\r\n                return (<Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} />)\r\n              }})\r\n            }\r\n          </ul>\r\n          {completed.length > 10 && <div className=\"loadMore\">Load More...</div>}\r\n        </div>}\r\n      </div>\r\n    </>\r\n  )};\r\n\r\nexport default TodoList;\r\n","import { connect } from 'react-redux';\r\nimport { toggleTodo, VisibilityFilters } from '../actions';\r\nimport TodoList from '../components/TodoList';\r\nconst getVisibleTodos = (todos, filter) => {\r\n    switch(filter){\r\n        case VisibilityFilters.SHOW_ALL: \r\n            return todos;\r\n        case VisibilityFilters.SHOW_COMPLETED:\r\n            return todos.filter(task => task.completed);\r\n        case VisibilityFilters.SHOW_ACTIVE:\r\n            return todos.filter(task => !task.completed);\r\n        default:\r\n            throw new Error('Unknown filter: ,' + filter) ;\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleTodo : id => dispatch(toggleTodo(id)),\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TodoList);","import React from 'react';\r\nimport AddTodo from '../containers/AddTodo';\r\nimport VisibleTodoList from '../containers/VisibleTodoList';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  return (\r\n  <div className=\"container\">\r\n    <div className=\"flexContainer\">\r\n      <h1>Tasks</h1>\r\n      <AddTodo />    \r\n      <VisibleTodoList />\r\n    </div>\r\n  </div>\r\n)};\r\n\r\nexport default App;","\r\nconst todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case 'TOGGLE_TODO':\r\n      return state.map(todo =>\r\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n        );\r\n    case 'SORT_TODO':\r\n      let sortedArray = state.sort((a,b) => {\r\n            var x = a.text.toLowerCase();\r\n            var y = b.text.toLowerCase();\r\n            if (x < y) {return -1;}\r\n            if (x > y) {return 1;}\r\n            return 0;\r\n          });\r\n      return [...sortedArray];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default todos;","import { VisibilityFilters } from '../actions';\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default visibilityFilter;","\r\nimport { combineReducers } from 'redux';\r\nimport todos from './todos';\r\nimport visibilityFilter from './visibilityFilter';\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store ={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}